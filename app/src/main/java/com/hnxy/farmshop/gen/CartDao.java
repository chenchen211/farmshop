package com.hnxy.farmshop.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CART".
*/
public class CartDao extends AbstractDao<Cart, Long> {

    public static final String TABLENAME = "CART";

    /**
     * Properties of entity Cart.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Product_id = new Property(1, String.class, "product_id", false, "PRODUCT_ID");
        public final static Property Product_name = new Property(2, String.class, "product_name", false, "PRODUCT_NAME");
        public final static Property Product_logo = new Property(3, String.class, "product_logo", false, "PRODUCT_LOGO");
        public final static Property Product_price = new Property(4, String.class, "product_price", false, "PRODUCT_PRICE");
    };


    public CartDao(DaoConfig config) {
        super(config);
    }
    
    public CartDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CART\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"PRODUCT_ID\" TEXT," + // 1: product_id
                "\"PRODUCT_NAME\" TEXT," + // 2: product_name
                "\"PRODUCT_LOGO\" TEXT," + // 3: product_logo
                "\"PRODUCT_PRICE\" TEXT);"); // 4: product_price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CART\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cart entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(2, product_id);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(3, product_name);
        }
 
        String product_logo = entity.getProduct_logo();
        if (product_logo != null) {
            stmt.bindString(4, product_logo);
        }
 
        String product_price = entity.getProduct_price();
        if (product_price != null) {
            stmt.bindString(5, product_price);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cart entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(2, product_id);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(3, product_name);
        }
 
        String product_logo = entity.getProduct_logo();
        if (product_logo != null) {
            stmt.bindString(4, product_logo);
        }
 
        String product_price = entity.getProduct_price();
        if (product_price != null) {
            stmt.bindString(5, product_price);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Cart readEntity(Cursor cursor, int offset) {
        Cart entity = new Cart( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // product_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // product_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // product_logo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // product_price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cart entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setProduct_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProduct_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProduct_logo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProduct_price(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cart entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cart entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
